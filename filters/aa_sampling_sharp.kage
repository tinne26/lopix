//kage:unit pixels
package main

// Notice: this shader is inspired by the anti-aliased pixel sampling
//         tutorials from d7samurai, see https://gist.github.com/d7samurai

var SourceRelativeTextureUnitX float
var SourceRelativeTextureUnitY float

func Fragment(_ vec4, sourceCoords vec2, _ vec4) vec4 {
	percent := vec2(SourceRelativeTextureUnitX, SourceRelativeTextureUnitY)
	sampleCoords := floor(sourceCoords) + smoothstep(0.0, 1.0, fract(sourceCoords)/percent) - 0.5
	
	// bilinear sampling
	const epsilon = 1.0/65536.0 // hack to get rid of artifacts
	minCoords, maxCoords := getMinMaxSourceCoords()
	percent = vec2(1.0 - epsilon, 1.0 - epsilon)
	halfPercent := percent/2.0
	tl := imageSrc0UnsafeAt(clamp(sampleCoords + vec2(-halfPercent.x, -halfPercent.y), minCoords, maxCoords))
	tr := imageSrc0UnsafeAt(clamp(sampleCoords + vec2(+halfPercent.x, -halfPercent.y), minCoords, maxCoords))
	bl := imageSrc0UnsafeAt(clamp(sampleCoords + vec2(-halfPercent.x, +halfPercent.y), minCoords, maxCoords))
	br := imageSrc0UnsafeAt(clamp(sampleCoords + vec2(+halfPercent.x, +halfPercent.y), minCoords, maxCoords))
	delta  := min(fract(sampleCoords + vec2(+halfPercent.x, +halfPercent.y)), percent)/percent
	top    := mix(tl, tr, delta.x)
	bottom := mix(bl, br, delta.x)
	return mix(top, bottom, delta.y)
}

func getMinMaxSourceCoords() (vec2, vec2) {
	const epsilon = 1.0/65536.0 // TODO: determine how small can we safely set this
	origin := imageSrc0Origin()
	return origin, origin + imageSrc0Size() - vec2(epsilon)
}
